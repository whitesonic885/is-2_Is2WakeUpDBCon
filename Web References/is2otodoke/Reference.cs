//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.42000
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// このソース コードは Microsoft.VSDesigner、バージョン 4.0.30319.42000 によって自動生成されました。
// 
#pragma warning disable 1591

namespace is2WakeUpDBCon.is2otodoke {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Service1Soap", Namespace="http://Walkthrough/XmlWebServices/")]
    public partial class Service1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback Get_todokesakiOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_StodokesakiOperationCompleted;
        
        private System.Threading.SendOrPostCallback Upd_todokesakiOperationCompleted;
        
        private System.Threading.SendOrPostCallback Ins_todokesakiOperationCompleted;
        
        private System.Threading.SendOrPostCallback Del_todokesakisOperationCompleted;
        
        private System.Threading.SendOrPostCallback Del_todokesakiOperationCompleted;
        
        private System.Threading.SendOrPostCallback Del_todokesaki2OperationCompleted;
        
        private System.Threading.SendOrPostCallback Del_todokesaki3OperationCompleted;
        
        private System.Threading.SendOrPostCallback Ins_uploadDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback Ins_uploadData2OperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_csvwriteOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_ninushiCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_otodokeCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_csvwrite2OperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_csvwrite3OperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_todokesaki2OperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_todokesaki3OperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_todokesaki4OperationCompleted;
        
        private System.Threading.SendOrPostCallback Check_TensyoCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback wakeupDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback wakeupDB2OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service1() {
            this.Url = "http://wwwis2.fukutsu.co.jp/is2/is2otodoke/Service1.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event Get_todokesakiCompletedEventHandler Get_todokesakiCompleted;
        
        /// <remarks/>
        public event Get_StodokesakiCompletedEventHandler Get_StodokesakiCompleted;
        
        /// <remarks/>
        public event Upd_todokesakiCompletedEventHandler Upd_todokesakiCompleted;
        
        /// <remarks/>
        public event Ins_todokesakiCompletedEventHandler Ins_todokesakiCompleted;
        
        /// <remarks/>
        public event Del_todokesakisCompletedEventHandler Del_todokesakisCompleted;
        
        /// <remarks/>
        public event Del_todokesakiCompletedEventHandler Del_todokesakiCompleted;
        
        /// <remarks/>
        public event Del_todokesaki2CompletedEventHandler Del_todokesaki2Completed;
        
        /// <remarks/>
        public event Del_todokesaki3CompletedEventHandler Del_todokesaki3Completed;
        
        /// <remarks/>
        public event Ins_uploadDataCompletedEventHandler Ins_uploadDataCompleted;
        
        /// <remarks/>
        public event Ins_uploadData2CompletedEventHandler Ins_uploadData2Completed;
        
        /// <remarks/>
        public event Get_csvwriteCompletedEventHandler Get_csvwriteCompleted;
        
        /// <remarks/>
        public event Get_ninushiCountCompletedEventHandler Get_ninushiCountCompleted;
        
        /// <remarks/>
        public event Get_otodokeCountCompletedEventHandler Get_otodokeCountCompleted;
        
        /// <remarks/>
        public event Get_csvwrite2CompletedEventHandler Get_csvwrite2Completed;
        
        /// <remarks/>
        public event Get_csvwrite3CompletedEventHandler Get_csvwrite3Completed;
        
        /// <remarks/>
        public event Get_todokesaki2CompletedEventHandler Get_todokesaki2Completed;
        
        /// <remarks/>
        public event Get_todokesaki3CompletedEventHandler Get_todokesaki3Completed;
        
        /// <remarks/>
        public event Get_todokesaki4CompletedEventHandler Get_todokesaki4Completed;
        
        /// <remarks/>
        public event Check_TensyoCodeCompletedEventHandler Check_TensyoCodeCompleted;
        
        /// <remarks/>
        public event wakeupDBCompletedEventHandler wakeupDBCompleted;
        
        /// <remarks/>
        public event wakeupDB2CompletedEventHandler wakeupDB2Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_todokesaki", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Get_todokesaki(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode) {
            object[] results = this.Invoke("Get_todokesaki", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGet_todokesaki(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Get_todokesaki", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGet_todokesaki(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_todokesakiAsync(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode) {
            this.Get_todokesakiAsync(sUser, sKCode, sBCode, sKana, sTCode, null);
        }
        
        /// <remarks/>
        public void Get_todokesakiAsync(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, object userState) {
            if ((this.Get_todokesakiOperationCompleted == null)) {
                this.Get_todokesakiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_todokesakiOperationCompleted);
            }
            this.InvokeAsync("Get_todokesaki", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode}, this.Get_todokesakiOperationCompleted, userState);
        }
        
        private void OnGet_todokesakiOperationCompleted(object arg) {
            if ((this.Get_todokesakiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_todokesakiCompleted(this, new Get_todokesakiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_Stodokesaki", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Get_Stodokesaki(string[] sUser, string sKCode, string sBCode, string sTCode) {
            object[] results = this.Invoke("Get_Stodokesaki", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sTCode});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGet_Stodokesaki(string[] sUser, string sKCode, string sBCode, string sTCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Get_Stodokesaki", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sTCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGet_Stodokesaki(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_StodokesakiAsync(string[] sUser, string sKCode, string sBCode, string sTCode) {
            this.Get_StodokesakiAsync(sUser, sKCode, sBCode, sTCode, null);
        }
        
        /// <remarks/>
        public void Get_StodokesakiAsync(string[] sUser, string sKCode, string sBCode, string sTCode, object userState) {
            if ((this.Get_StodokesakiOperationCompleted == null)) {
                this.Get_StodokesakiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_StodokesakiOperationCompleted);
            }
            this.InvokeAsync("Get_Stodokesaki", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sTCode}, this.Get_StodokesakiOperationCompleted, userState);
        }
        
        private void OnGet_StodokesakiOperationCompleted(object arg) {
            if ((this.Get_StodokesakiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_StodokesakiCompleted(this, new Get_StodokesakiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Upd_todokesaki", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Upd_todokesaki(string[] sUser, string[] sData) {
            object[] results = this.Invoke("Upd_todokesaki", new object[] {
                        sUser,
                        sData});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpd_todokesaki(string[] sUser, string[] sData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Upd_todokesaki", new object[] {
                        sUser,
                        sData}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndUpd_todokesaki(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Upd_todokesakiAsync(string[] sUser, string[] sData) {
            this.Upd_todokesakiAsync(sUser, sData, null);
        }
        
        /// <remarks/>
        public void Upd_todokesakiAsync(string[] sUser, string[] sData, object userState) {
            if ((this.Upd_todokesakiOperationCompleted == null)) {
                this.Upd_todokesakiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpd_todokesakiOperationCompleted);
            }
            this.InvokeAsync("Upd_todokesaki", new object[] {
                        sUser,
                        sData}, this.Upd_todokesakiOperationCompleted, userState);
        }
        
        private void OnUpd_todokesakiOperationCompleted(object arg) {
            if ((this.Upd_todokesakiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Upd_todokesakiCompleted(this, new Upd_todokesakiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Ins_todokesaki", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Ins_todokesaki(string[] sUser, string[] sData) {
            object[] results = this.Invoke("Ins_todokesaki", new object[] {
                        sUser,
                        sData});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIns_todokesaki(string[] sUser, string[] sData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Ins_todokesaki", new object[] {
                        sUser,
                        sData}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndIns_todokesaki(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Ins_todokesakiAsync(string[] sUser, string[] sData) {
            this.Ins_todokesakiAsync(sUser, sData, null);
        }
        
        /// <remarks/>
        public void Ins_todokesakiAsync(string[] sUser, string[] sData, object userState) {
            if ((this.Ins_todokesakiOperationCompleted == null)) {
                this.Ins_todokesakiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIns_todokesakiOperationCompleted);
            }
            this.InvokeAsync("Ins_todokesaki", new object[] {
                        sUser,
                        sData}, this.Ins_todokesakiOperationCompleted, userState);
        }
        
        private void OnIns_todokesakiOperationCompleted(object arg) {
            if ((this.Ins_todokesakiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Ins_todokesakiCompleted(this, new Ins_todokesakiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Del_todokesakis", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Del_todokesakis(string[] sUser, string[] sData, string[] sList) {
            object[] results = this.Invoke("Del_todokesakis", new object[] {
                        sUser,
                        sData,
                        sList});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDel_todokesakis(string[] sUser, string[] sData, string[] sList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Del_todokesakis", new object[] {
                        sUser,
                        sData,
                        sList}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndDel_todokesakis(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Del_todokesakisAsync(string[] sUser, string[] sData, string[] sList) {
            this.Del_todokesakisAsync(sUser, sData, sList, null);
        }
        
        /// <remarks/>
        public void Del_todokesakisAsync(string[] sUser, string[] sData, string[] sList, object userState) {
            if ((this.Del_todokesakisOperationCompleted == null)) {
                this.Del_todokesakisOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDel_todokesakisOperationCompleted);
            }
            this.InvokeAsync("Del_todokesakis", new object[] {
                        sUser,
                        sData,
                        sList}, this.Del_todokesakisOperationCompleted, userState);
        }
        
        private void OnDel_todokesakisOperationCompleted(object arg) {
            if ((this.Del_todokesakisCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Del_todokesakisCompleted(this, new Del_todokesakisCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Del_todokesaki", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Del_todokesaki(string[] sUser, string[] sData) {
            object[] results = this.Invoke("Del_todokesaki", new object[] {
                        sUser,
                        sData});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDel_todokesaki(string[] sUser, string[] sData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Del_todokesaki", new object[] {
                        sUser,
                        sData}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndDel_todokesaki(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Del_todokesakiAsync(string[] sUser, string[] sData) {
            this.Del_todokesakiAsync(sUser, sData, null);
        }
        
        /// <remarks/>
        public void Del_todokesakiAsync(string[] sUser, string[] sData, object userState) {
            if ((this.Del_todokesakiOperationCompleted == null)) {
                this.Del_todokesakiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDel_todokesakiOperationCompleted);
            }
            this.InvokeAsync("Del_todokesaki", new object[] {
                        sUser,
                        sData}, this.Del_todokesakiOperationCompleted, userState);
        }
        
        private void OnDel_todokesakiOperationCompleted(object arg) {
            if ((this.Del_todokesakiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Del_todokesakiCompleted(this, new Del_todokesakiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Del_todokesaki2", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Del_todokesaki2(string[] sUser, string sKCode, string sBCode, string sTCode) {
            object[] results = this.Invoke("Del_todokesaki2", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sTCode});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDel_todokesaki2(string[] sUser, string sKCode, string sBCode, string sTCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Del_todokesaki2", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sTCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndDel_todokesaki2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Del_todokesaki2Async(string[] sUser, string sKCode, string sBCode, string sTCode) {
            this.Del_todokesaki2Async(sUser, sKCode, sBCode, sTCode, null);
        }
        
        /// <remarks/>
        public void Del_todokesaki2Async(string[] sUser, string sKCode, string sBCode, string sTCode, object userState) {
            if ((this.Del_todokesaki2OperationCompleted == null)) {
                this.Del_todokesaki2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDel_todokesaki2OperationCompleted);
            }
            this.InvokeAsync("Del_todokesaki2", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sTCode}, this.Del_todokesaki2OperationCompleted, userState);
        }
        
        private void OnDel_todokesaki2OperationCompleted(object arg) {
            if ((this.Del_todokesaki2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Del_todokesaki2Completed(this, new Del_todokesaki2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Del_todokesaki3", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Del_todokesaki3(string[] sUser, string[] sData) {
            object[] results = this.Invoke("Del_todokesaki3", new object[] {
                        sUser,
                        sData});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDel_todokesaki3(string[] sUser, string[] sData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Del_todokesaki3", new object[] {
                        sUser,
                        sData}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndDel_todokesaki3(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Del_todokesaki3Async(string[] sUser, string[] sData) {
            this.Del_todokesaki3Async(sUser, sData, null);
        }
        
        /// <remarks/>
        public void Del_todokesaki3Async(string[] sUser, string[] sData, object userState) {
            if ((this.Del_todokesaki3OperationCompleted == null)) {
                this.Del_todokesaki3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDel_todokesaki3OperationCompleted);
            }
            this.InvokeAsync("Del_todokesaki3", new object[] {
                        sUser,
                        sData}, this.Del_todokesaki3OperationCompleted, userState);
        }
        
        private void OnDel_todokesaki3OperationCompleted(object arg) {
            if ((this.Del_todokesaki3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Del_todokesaki3Completed(this, new Del_todokesaki3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Ins_uploadData", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Ins_uploadData(string[] sUser, string[] sList) {
            object[] results = this.Invoke("Ins_uploadData", new object[] {
                        sUser,
                        sList});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIns_uploadData(string[] sUser, string[] sList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Ins_uploadData", new object[] {
                        sUser,
                        sList}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndIns_uploadData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Ins_uploadDataAsync(string[] sUser, string[] sList) {
            this.Ins_uploadDataAsync(sUser, sList, null);
        }
        
        /// <remarks/>
        public void Ins_uploadDataAsync(string[] sUser, string[] sList, object userState) {
            if ((this.Ins_uploadDataOperationCompleted == null)) {
                this.Ins_uploadDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIns_uploadDataOperationCompleted);
            }
            this.InvokeAsync("Ins_uploadData", new object[] {
                        sUser,
                        sList}, this.Ins_uploadDataOperationCompleted, userState);
        }
        
        private void OnIns_uploadDataOperationCompleted(object arg) {
            if ((this.Ins_uploadDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Ins_uploadDataCompleted(this, new Ins_uploadDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Ins_uploadData2", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Ins_uploadData2(string[] sUser, string[] sList) {
            object[] results = this.Invoke("Ins_uploadData2", new object[] {
                        sUser,
                        sList});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIns_uploadData2(string[] sUser, string[] sList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Ins_uploadData2", new object[] {
                        sUser,
                        sList}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndIns_uploadData2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Ins_uploadData2Async(string[] sUser, string[] sList) {
            this.Ins_uploadData2Async(sUser, sList, null);
        }
        
        /// <remarks/>
        public void Ins_uploadData2Async(string[] sUser, string[] sList, object userState) {
            if ((this.Ins_uploadData2OperationCompleted == null)) {
                this.Ins_uploadData2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnIns_uploadData2OperationCompleted);
            }
            this.InvokeAsync("Ins_uploadData2", new object[] {
                        sUser,
                        sList}, this.Ins_uploadData2OperationCompleted, userState);
        }
        
        private void OnIns_uploadData2OperationCompleted(object arg) {
            if ((this.Ins_uploadData2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Ins_uploadData2Completed(this, new Ins_uploadData2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_csvwrite", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Get_csvwrite(string[] sUser, string sKCode, string sBCode) {
            object[] results = this.Invoke("Get_csvwrite", new object[] {
                        sUser,
                        sKCode,
                        sBCode});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGet_csvwrite(string[] sUser, string sKCode, string sBCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Get_csvwrite", new object[] {
                        sUser,
                        sKCode,
                        sBCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGet_csvwrite(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_csvwriteAsync(string[] sUser, string sKCode, string sBCode) {
            this.Get_csvwriteAsync(sUser, sKCode, sBCode, null);
        }
        
        /// <remarks/>
        public void Get_csvwriteAsync(string[] sUser, string sKCode, string sBCode, object userState) {
            if ((this.Get_csvwriteOperationCompleted == null)) {
                this.Get_csvwriteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_csvwriteOperationCompleted);
            }
            this.InvokeAsync("Get_csvwrite", new object[] {
                        sUser,
                        sKCode,
                        sBCode}, this.Get_csvwriteOperationCompleted, userState);
        }
        
        private void OnGet_csvwriteOperationCompleted(object arg) {
            if ((this.Get_csvwriteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_csvwriteCompleted(this, new Get_csvwriteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_ninushiCount", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Get_ninushiCount(string[] sUser, string sKCode, string sBCode) {
            object[] results = this.Invoke("Get_ninushiCount", new object[] {
                        sUser,
                        sKCode,
                        sBCode});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGet_ninushiCount(string[] sUser, string sKCode, string sBCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Get_ninushiCount", new object[] {
                        sUser,
                        sKCode,
                        sBCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGet_ninushiCount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_ninushiCountAsync(string[] sUser, string sKCode, string sBCode) {
            this.Get_ninushiCountAsync(sUser, sKCode, sBCode, null);
        }
        
        /// <remarks/>
        public void Get_ninushiCountAsync(string[] sUser, string sKCode, string sBCode, object userState) {
            if ((this.Get_ninushiCountOperationCompleted == null)) {
                this.Get_ninushiCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_ninushiCountOperationCompleted);
            }
            this.InvokeAsync("Get_ninushiCount", new object[] {
                        sUser,
                        sKCode,
                        sBCode}, this.Get_ninushiCountOperationCompleted, userState);
        }
        
        private void OnGet_ninushiCountOperationCompleted(object arg) {
            if ((this.Get_ninushiCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_ninushiCountCompleted(this, new Get_ninushiCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_otodokeCount", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Get_otodokeCount(string[] sUser, string sKCode, string sBCode) {
            object[] results = this.Invoke("Get_otodokeCount", new object[] {
                        sUser,
                        sKCode,
                        sBCode});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGet_otodokeCount(string[] sUser, string sKCode, string sBCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Get_otodokeCount", new object[] {
                        sUser,
                        sKCode,
                        sBCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGet_otodokeCount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_otodokeCountAsync(string[] sUser, string sKCode, string sBCode) {
            this.Get_otodokeCountAsync(sUser, sKCode, sBCode, null);
        }
        
        /// <remarks/>
        public void Get_otodokeCountAsync(string[] sUser, string sKCode, string sBCode, object userState) {
            if ((this.Get_otodokeCountOperationCompleted == null)) {
                this.Get_otodokeCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_otodokeCountOperationCompleted);
            }
            this.InvokeAsync("Get_otodokeCount", new object[] {
                        sUser,
                        sKCode,
                        sBCode}, this.Get_otodokeCountOperationCompleted, userState);
        }
        
        private void OnGet_otodokeCountOperationCompleted(object arg) {
            if ((this.Get_otodokeCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_otodokeCountCompleted(this, new Get_otodokeCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_csvwrite2", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Get_csvwrite2(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, string sTelNo, string sTelNo2, string sTelNo3, string sName, int iSortLabel1, int iSortPat1, int iSortLabel2, int iSortPat2) {
            object[] results = this.Invoke("Get_csvwrite2", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode,
                        sTelNo,
                        sTelNo2,
                        sTelNo3,
                        sName,
                        iSortLabel1,
                        iSortPat1,
                        iSortLabel2,
                        iSortPat2});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGet_csvwrite2(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, string sTelNo, string sTelNo2, string sTelNo3, string sName, int iSortLabel1, int iSortPat1, int iSortLabel2, int iSortPat2, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Get_csvwrite2", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode,
                        sTelNo,
                        sTelNo2,
                        sTelNo3,
                        sName,
                        iSortLabel1,
                        iSortPat1,
                        iSortLabel2,
                        iSortPat2}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGet_csvwrite2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_csvwrite2Async(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, string sTelNo, string sTelNo2, string sTelNo3, string sName, int iSortLabel1, int iSortPat1, int iSortLabel2, int iSortPat2) {
            this.Get_csvwrite2Async(sUser, sKCode, sBCode, sKana, sTCode, sTelNo, sTelNo2, sTelNo3, sName, iSortLabel1, iSortPat1, iSortLabel2, iSortPat2, null);
        }
        
        /// <remarks/>
        public void Get_csvwrite2Async(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, string sTelNo, string sTelNo2, string sTelNo3, string sName, int iSortLabel1, int iSortPat1, int iSortLabel2, int iSortPat2, object userState) {
            if ((this.Get_csvwrite2OperationCompleted == null)) {
                this.Get_csvwrite2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_csvwrite2OperationCompleted);
            }
            this.InvokeAsync("Get_csvwrite2", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode,
                        sTelNo,
                        sTelNo2,
                        sTelNo3,
                        sName,
                        iSortLabel1,
                        iSortPat1,
                        iSortLabel2,
                        iSortPat2}, this.Get_csvwrite2OperationCompleted, userState);
        }
        
        private void OnGet_csvwrite2OperationCompleted(object arg) {
            if ((this.Get_csvwrite2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_csvwrite2Completed(this, new Get_csvwrite2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_csvwrite3", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Get_csvwrite3(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, string sTelNo, string sTelNo2, string sTelNo3, string sName, int iSortLabel1, int iSortPat1, int iSortLabel2, int iSortPat2, string sUpdateDay) {
            object[] results = this.Invoke("Get_csvwrite3", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode,
                        sTelNo,
                        sTelNo2,
                        sTelNo3,
                        sName,
                        iSortLabel1,
                        iSortPat1,
                        iSortLabel2,
                        iSortPat2,
                        sUpdateDay});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGet_csvwrite3(
                    string[] sUser, 
                    string sKCode, 
                    string sBCode, 
                    string sKana, 
                    string sTCode, 
                    string sTelNo, 
                    string sTelNo2, 
                    string sTelNo3, 
                    string sName, 
                    int iSortLabel1, 
                    int iSortPat1, 
                    int iSortLabel2, 
                    int iSortPat2, 
                    string sUpdateDay, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("Get_csvwrite3", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode,
                        sTelNo,
                        sTelNo2,
                        sTelNo3,
                        sName,
                        iSortLabel1,
                        iSortPat1,
                        iSortLabel2,
                        iSortPat2,
                        sUpdateDay}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGet_csvwrite3(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_csvwrite3Async(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, string sTelNo, string sTelNo2, string sTelNo3, string sName, int iSortLabel1, int iSortPat1, int iSortLabel2, int iSortPat2, string sUpdateDay) {
            this.Get_csvwrite3Async(sUser, sKCode, sBCode, sKana, sTCode, sTelNo, sTelNo2, sTelNo3, sName, iSortLabel1, iSortPat1, iSortLabel2, iSortPat2, sUpdateDay, null);
        }
        
        /// <remarks/>
        public void Get_csvwrite3Async(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, string sTelNo, string sTelNo2, string sTelNo3, string sName, int iSortLabel1, int iSortPat1, int iSortLabel2, int iSortPat2, string sUpdateDay, object userState) {
            if ((this.Get_csvwrite3OperationCompleted == null)) {
                this.Get_csvwrite3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_csvwrite3OperationCompleted);
            }
            this.InvokeAsync("Get_csvwrite3", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode,
                        sTelNo,
                        sTelNo2,
                        sTelNo3,
                        sName,
                        iSortLabel1,
                        iSortPat1,
                        iSortLabel2,
                        iSortPat2,
                        sUpdateDay}, this.Get_csvwrite3OperationCompleted, userState);
        }
        
        private void OnGet_csvwrite3OperationCompleted(object arg) {
            if ((this.Get_csvwrite3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_csvwrite3Completed(this, new Get_csvwrite3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_todokesaki2", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Get_todokesaki2(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, string sTelNo, string sTelNo2, string sTelNo3, string sName, int iSortLabel1, int iSortPat1, int iSortLabel2, int iSortPat2) {
            object[] results = this.Invoke("Get_todokesaki2", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode,
                        sTelNo,
                        sTelNo2,
                        sTelNo3,
                        sName,
                        iSortLabel1,
                        iSortPat1,
                        iSortLabel2,
                        iSortPat2});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGet_todokesaki2(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, string sTelNo, string sTelNo2, string sTelNo3, string sName, int iSortLabel1, int iSortPat1, int iSortLabel2, int iSortPat2, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Get_todokesaki2", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode,
                        sTelNo,
                        sTelNo2,
                        sTelNo3,
                        sName,
                        iSortLabel1,
                        iSortPat1,
                        iSortLabel2,
                        iSortPat2}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGet_todokesaki2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_todokesaki2Async(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, string sTelNo, string sTelNo2, string sTelNo3, string sName, int iSortLabel1, int iSortPat1, int iSortLabel2, int iSortPat2) {
            this.Get_todokesaki2Async(sUser, sKCode, sBCode, sKana, sTCode, sTelNo, sTelNo2, sTelNo3, sName, iSortLabel1, iSortPat1, iSortLabel2, iSortPat2, null);
        }
        
        /// <remarks/>
        public void Get_todokesaki2Async(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, string sTelNo, string sTelNo2, string sTelNo3, string sName, int iSortLabel1, int iSortPat1, int iSortLabel2, int iSortPat2, object userState) {
            if ((this.Get_todokesaki2OperationCompleted == null)) {
                this.Get_todokesaki2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_todokesaki2OperationCompleted);
            }
            this.InvokeAsync("Get_todokesaki2", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode,
                        sTelNo,
                        sTelNo2,
                        sTelNo3,
                        sName,
                        iSortLabel1,
                        iSortPat1,
                        iSortLabel2,
                        iSortPat2}, this.Get_todokesaki2OperationCompleted, userState);
        }
        
        private void OnGet_todokesaki2OperationCompleted(object arg) {
            if ((this.Get_todokesaki2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_todokesaki2Completed(this, new Get_todokesaki2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_todokesaki3", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Get_todokesaki3(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, string sTelNo, string sTelNo2, string sTelNo3, string sName, int iSortLabel1, int iSortPat1, int iSortLabel2, int iSortPat2, bool bMultiLine) {
            object[] results = this.Invoke("Get_todokesaki3", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode,
                        sTelNo,
                        sTelNo2,
                        sTelNo3,
                        sName,
                        iSortLabel1,
                        iSortPat1,
                        iSortLabel2,
                        iSortPat2,
                        bMultiLine});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGet_todokesaki3(
                    string[] sUser, 
                    string sKCode, 
                    string sBCode, 
                    string sKana, 
                    string sTCode, 
                    string sTelNo, 
                    string sTelNo2, 
                    string sTelNo3, 
                    string sName, 
                    int iSortLabel1, 
                    int iSortPat1, 
                    int iSortLabel2, 
                    int iSortPat2, 
                    bool bMultiLine, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("Get_todokesaki3", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode,
                        sTelNo,
                        sTelNo2,
                        sTelNo3,
                        sName,
                        iSortLabel1,
                        iSortPat1,
                        iSortLabel2,
                        iSortPat2,
                        bMultiLine}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGet_todokesaki3(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_todokesaki3Async(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, string sTelNo, string sTelNo2, string sTelNo3, string sName, int iSortLabel1, int iSortPat1, int iSortLabel2, int iSortPat2, bool bMultiLine) {
            this.Get_todokesaki3Async(sUser, sKCode, sBCode, sKana, sTCode, sTelNo, sTelNo2, sTelNo3, sName, iSortLabel1, iSortPat1, iSortLabel2, iSortPat2, bMultiLine, null);
        }
        
        /// <remarks/>
        public void Get_todokesaki3Async(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, string sTelNo, string sTelNo2, string sTelNo3, string sName, int iSortLabel1, int iSortPat1, int iSortLabel2, int iSortPat2, bool bMultiLine, object userState) {
            if ((this.Get_todokesaki3OperationCompleted == null)) {
                this.Get_todokesaki3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_todokesaki3OperationCompleted);
            }
            this.InvokeAsync("Get_todokesaki3", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode,
                        sTelNo,
                        sTelNo2,
                        sTelNo3,
                        sName,
                        iSortLabel1,
                        iSortPat1,
                        iSortLabel2,
                        iSortPat2,
                        bMultiLine}, this.Get_todokesaki3OperationCompleted, userState);
        }
        
        private void OnGet_todokesaki3OperationCompleted(object arg) {
            if ((this.Get_todokesaki3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_todokesaki3Completed(this, new Get_todokesaki3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_todokesaki4", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Get_todokesaki4(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, string sTelNo, string sTelNo2, string sTelNo3, string sName, int iSortLabel1, int iSortPat1, int iSortLabel2, int iSortPat2, bool bMultiLine, string sUpdateDay) {
            object[] results = this.Invoke("Get_todokesaki4", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode,
                        sTelNo,
                        sTelNo2,
                        sTelNo3,
                        sName,
                        iSortLabel1,
                        iSortPat1,
                        iSortLabel2,
                        iSortPat2,
                        bMultiLine,
                        sUpdateDay});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGet_todokesaki4(
                    string[] sUser, 
                    string sKCode, 
                    string sBCode, 
                    string sKana, 
                    string sTCode, 
                    string sTelNo, 
                    string sTelNo2, 
                    string sTelNo3, 
                    string sName, 
                    int iSortLabel1, 
                    int iSortPat1, 
                    int iSortLabel2, 
                    int iSortPat2, 
                    bool bMultiLine, 
                    string sUpdateDay, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("Get_todokesaki4", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode,
                        sTelNo,
                        sTelNo2,
                        sTelNo3,
                        sName,
                        iSortLabel1,
                        iSortPat1,
                        iSortLabel2,
                        iSortPat2,
                        bMultiLine,
                        sUpdateDay}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGet_todokesaki4(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_todokesaki4Async(string[] sUser, string sKCode, string sBCode, string sKana, string sTCode, string sTelNo, string sTelNo2, string sTelNo3, string sName, int iSortLabel1, int iSortPat1, int iSortLabel2, int iSortPat2, bool bMultiLine, string sUpdateDay) {
            this.Get_todokesaki4Async(sUser, sKCode, sBCode, sKana, sTCode, sTelNo, sTelNo2, sTelNo3, sName, iSortLabel1, iSortPat1, iSortLabel2, iSortPat2, bMultiLine, sUpdateDay, null);
        }
        
        /// <remarks/>
        public void Get_todokesaki4Async(
                    string[] sUser, 
                    string sKCode, 
                    string sBCode, 
                    string sKana, 
                    string sTCode, 
                    string sTelNo, 
                    string sTelNo2, 
                    string sTelNo3, 
                    string sName, 
                    int iSortLabel1, 
                    int iSortPat1, 
                    int iSortLabel2, 
                    int iSortPat2, 
                    bool bMultiLine, 
                    string sUpdateDay, 
                    object userState) {
            if ((this.Get_todokesaki4OperationCompleted == null)) {
                this.Get_todokesaki4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_todokesaki4OperationCompleted);
            }
            this.InvokeAsync("Get_todokesaki4", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sKana,
                        sTCode,
                        sTelNo,
                        sTelNo2,
                        sTelNo3,
                        sName,
                        iSortLabel1,
                        iSortPat1,
                        iSortLabel2,
                        iSortPat2,
                        bMultiLine,
                        sUpdateDay}, this.Get_todokesaki4OperationCompleted, userState);
        }
        
        private void OnGet_todokesaki4OperationCompleted(object arg) {
            if ((this.Get_todokesaki4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_todokesaki4Completed(this, new Get_todokesaki4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Check_TensyoCode", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Check_TensyoCode(string[] sUser, string sTensyoCode) {
            object[] results = this.Invoke("Check_TensyoCode", new object[] {
                        sUser,
                        sTensyoCode});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheck_TensyoCode(string[] sUser, string sTensyoCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Check_TensyoCode", new object[] {
                        sUser,
                        sTensyoCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndCheck_TensyoCode(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Check_TensyoCodeAsync(string[] sUser, string sTensyoCode) {
            this.Check_TensyoCodeAsync(sUser, sTensyoCode, null);
        }
        
        /// <remarks/>
        public void Check_TensyoCodeAsync(string[] sUser, string sTensyoCode, object userState) {
            if ((this.Check_TensyoCodeOperationCompleted == null)) {
                this.Check_TensyoCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheck_TensyoCodeOperationCompleted);
            }
            this.InvokeAsync("Check_TensyoCode", new object[] {
                        sUser,
                        sTensyoCode}, this.Check_TensyoCodeOperationCompleted, userState);
        }
        
        private void OnCheck_TensyoCodeOperationCompleted(object arg) {
            if ((this.Check_TensyoCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Check_TensyoCodeCompleted(this, new Check_TensyoCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/wakeupDB", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string wakeupDB() {
            object[] results = this.Invoke("wakeupDB", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginwakeupDB(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("wakeupDB", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndwakeupDB(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void wakeupDBAsync() {
            this.wakeupDBAsync(null);
        }
        
        /// <remarks/>
        public void wakeupDBAsync(object userState) {
            if ((this.wakeupDBOperationCompleted == null)) {
                this.wakeupDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnwakeupDBOperationCompleted);
            }
            this.InvokeAsync("wakeupDB", new object[0], this.wakeupDBOperationCompleted, userState);
        }
        
        private void OnwakeupDBOperationCompleted(object arg) {
            if ((this.wakeupDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.wakeupDBCompleted(this, new wakeupDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/wakeupDB2", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string wakeupDB2(int iConCnt) {
            object[] results = this.Invoke("wakeupDB2", new object[] {
                        iConCnt});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginwakeupDB2(int iConCnt, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("wakeupDB2", new object[] {
                        iConCnt}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndwakeupDB2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void wakeupDB2Async(int iConCnt) {
            this.wakeupDB2Async(iConCnt, null);
        }
        
        /// <remarks/>
        public void wakeupDB2Async(int iConCnt, object userState) {
            if ((this.wakeupDB2OperationCompleted == null)) {
                this.wakeupDB2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnwakeupDB2OperationCompleted);
            }
            this.InvokeAsync("wakeupDB2", new object[] {
                        iConCnt}, this.wakeupDB2OperationCompleted, userState);
        }
        
        private void OnwakeupDB2OperationCompleted(object arg) {
            if ((this.wakeupDB2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.wakeupDB2Completed(this, new wakeupDB2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Get_todokesakiCompletedEventHandler(object sender, Get_todokesakiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_todokesakiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_todokesakiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Get_StodokesakiCompletedEventHandler(object sender, Get_StodokesakiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_StodokesakiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_StodokesakiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Upd_todokesakiCompletedEventHandler(object sender, Upd_todokesakiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Upd_todokesakiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Upd_todokesakiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Ins_todokesakiCompletedEventHandler(object sender, Ins_todokesakiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Ins_todokesakiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Ins_todokesakiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Del_todokesakisCompletedEventHandler(object sender, Del_todokesakisCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Del_todokesakisCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Del_todokesakisCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Del_todokesakiCompletedEventHandler(object sender, Del_todokesakiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Del_todokesakiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Del_todokesakiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Del_todokesaki2CompletedEventHandler(object sender, Del_todokesaki2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Del_todokesaki2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Del_todokesaki2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Del_todokesaki3CompletedEventHandler(object sender, Del_todokesaki3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Del_todokesaki3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Del_todokesaki3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Ins_uploadDataCompletedEventHandler(object sender, Ins_uploadDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Ins_uploadDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Ins_uploadDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Ins_uploadData2CompletedEventHandler(object sender, Ins_uploadData2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Ins_uploadData2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Ins_uploadData2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Get_csvwriteCompletedEventHandler(object sender, Get_csvwriteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_csvwriteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_csvwriteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Get_ninushiCountCompletedEventHandler(object sender, Get_ninushiCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_ninushiCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_ninushiCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Get_otodokeCountCompletedEventHandler(object sender, Get_otodokeCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_otodokeCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_otodokeCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Get_csvwrite2CompletedEventHandler(object sender, Get_csvwrite2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_csvwrite2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_csvwrite2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Get_csvwrite3CompletedEventHandler(object sender, Get_csvwrite3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_csvwrite3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_csvwrite3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Get_todokesaki2CompletedEventHandler(object sender, Get_todokesaki2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_todokesaki2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_todokesaki2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Get_todokesaki3CompletedEventHandler(object sender, Get_todokesaki3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_todokesaki3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_todokesaki3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Get_todokesaki4CompletedEventHandler(object sender, Get_todokesaki4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_todokesaki4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_todokesaki4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Check_TensyoCodeCompletedEventHandler(object sender, Check_TensyoCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Check_TensyoCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Check_TensyoCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void wakeupDBCompletedEventHandler(object sender, wakeupDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class wakeupDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal wakeupDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void wakeupDB2CompletedEventHandler(object sender, wakeupDB2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class wakeupDB2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal wakeupDB2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591