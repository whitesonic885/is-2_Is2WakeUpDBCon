//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.42000
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// このソース コードは Microsoft.VSDesigner、バージョン 4.0.30319.42000 によって自動生成されました。
// 
#pragma warning disable 1591

namespace is2WakeUpDBCon.is2kiji {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Service1Soap", Namespace="http://Walkthrough/XmlWebServices/")]
    public partial class Service1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback Get_kijiOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_SkijiOperationCompleted;
        
        private System.Threading.SendOrPostCallback Upd_kijiOperationCompleted;
        
        private System.Threading.SendOrPostCallback Ins_kijiOperationCompleted;
        
        private System.Threading.SendOrPostCallback Del_kijiOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_kijiCDOperationCompleted;
        
        private System.Threading.SendOrPostCallback wakeupDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback wakeupDB2OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service1() {
            this.Url = "http://wwwis2.fukutsu.co.jp/is2/is2kiji/Service1.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event Get_kijiCompletedEventHandler Get_kijiCompleted;
        
        /// <remarks/>
        public event Get_SkijiCompletedEventHandler Get_SkijiCompleted;
        
        /// <remarks/>
        public event Upd_kijiCompletedEventHandler Upd_kijiCompleted;
        
        /// <remarks/>
        public event Ins_kijiCompletedEventHandler Ins_kijiCompleted;
        
        /// <remarks/>
        public event Del_kijiCompletedEventHandler Del_kijiCompleted;
        
        /// <remarks/>
        public event Get_kijiCDCompletedEventHandler Get_kijiCDCompleted;
        
        /// <remarks/>
        public event wakeupDBCompletedEventHandler wakeupDBCompleted;
        
        /// <remarks/>
        public event wakeupDB2CompletedEventHandler wakeupDB2Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_kiji", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Get_kiji(string[] sUser, string sKCode, string sBCode) {
            object[] results = this.Invoke("Get_kiji", new object[] {
                        sUser,
                        sKCode,
                        sBCode});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGet_kiji(string[] sUser, string sKCode, string sBCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Get_kiji", new object[] {
                        sUser,
                        sKCode,
                        sBCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGet_kiji(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_kijiAsync(string[] sUser, string sKCode, string sBCode) {
            this.Get_kijiAsync(sUser, sKCode, sBCode, null);
        }
        
        /// <remarks/>
        public void Get_kijiAsync(string[] sUser, string sKCode, string sBCode, object userState) {
            if ((this.Get_kijiOperationCompleted == null)) {
                this.Get_kijiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_kijiOperationCompleted);
            }
            this.InvokeAsync("Get_kiji", new object[] {
                        sUser,
                        sKCode,
                        sBCode}, this.Get_kijiOperationCompleted, userState);
        }
        
        private void OnGet_kijiOperationCompleted(object arg) {
            if ((this.Get_kijiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_kijiCompleted(this, new Get_kijiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_Skiji", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Get_Skiji(string[] sUser, string sKCode, string sBCode, string sCode) {
            object[] results = this.Invoke("Get_Skiji", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sCode});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGet_Skiji(string[] sUser, string sKCode, string sBCode, string sCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Get_Skiji", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGet_Skiji(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_SkijiAsync(string[] sUser, string sKCode, string sBCode, string sCode) {
            this.Get_SkijiAsync(sUser, sKCode, sBCode, sCode, null);
        }
        
        /// <remarks/>
        public void Get_SkijiAsync(string[] sUser, string sKCode, string sBCode, string sCode, object userState) {
            if ((this.Get_SkijiOperationCompleted == null)) {
                this.Get_SkijiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_SkijiOperationCompleted);
            }
            this.InvokeAsync("Get_Skiji", new object[] {
                        sUser,
                        sKCode,
                        sBCode,
                        sCode}, this.Get_SkijiOperationCompleted, userState);
        }
        
        private void OnGet_SkijiOperationCompleted(object arg) {
            if ((this.Get_SkijiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_SkijiCompleted(this, new Get_SkijiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Upd_kiji", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Upd_kiji(string[] sUser, string[] sData) {
            object[] results = this.Invoke("Upd_kiji", new object[] {
                        sUser,
                        sData});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpd_kiji(string[] sUser, string[] sData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Upd_kiji", new object[] {
                        sUser,
                        sData}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndUpd_kiji(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Upd_kijiAsync(string[] sUser, string[] sData) {
            this.Upd_kijiAsync(sUser, sData, null);
        }
        
        /// <remarks/>
        public void Upd_kijiAsync(string[] sUser, string[] sData, object userState) {
            if ((this.Upd_kijiOperationCompleted == null)) {
                this.Upd_kijiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpd_kijiOperationCompleted);
            }
            this.InvokeAsync("Upd_kiji", new object[] {
                        sUser,
                        sData}, this.Upd_kijiOperationCompleted, userState);
        }
        
        private void OnUpd_kijiOperationCompleted(object arg) {
            if ((this.Upd_kijiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Upd_kijiCompleted(this, new Upd_kijiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Ins_kiji", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Ins_kiji(string[] sUser, string[] sData) {
            object[] results = this.Invoke("Ins_kiji", new object[] {
                        sUser,
                        sData});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIns_kiji(string[] sUser, string[] sData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Ins_kiji", new object[] {
                        sUser,
                        sData}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndIns_kiji(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Ins_kijiAsync(string[] sUser, string[] sData) {
            this.Ins_kijiAsync(sUser, sData, null);
        }
        
        /// <remarks/>
        public void Ins_kijiAsync(string[] sUser, string[] sData, object userState) {
            if ((this.Ins_kijiOperationCompleted == null)) {
                this.Ins_kijiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIns_kijiOperationCompleted);
            }
            this.InvokeAsync("Ins_kiji", new object[] {
                        sUser,
                        sData}, this.Ins_kijiOperationCompleted, userState);
        }
        
        private void OnIns_kijiOperationCompleted(object arg) {
            if ((this.Ins_kijiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Ins_kijiCompleted(this, new Ins_kijiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Del_kiji", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Del_kiji(string[] sUser, string[] sData) {
            object[] results = this.Invoke("Del_kiji", new object[] {
                        sUser,
                        sData});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDel_kiji(string[] sUser, string[] sData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Del_kiji", new object[] {
                        sUser,
                        sData}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndDel_kiji(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Del_kijiAsync(string[] sUser, string[] sData) {
            this.Del_kijiAsync(sUser, sData, null);
        }
        
        /// <remarks/>
        public void Del_kijiAsync(string[] sUser, string[] sData, object userState) {
            if ((this.Del_kijiOperationCompleted == null)) {
                this.Del_kijiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDel_kijiOperationCompleted);
            }
            this.InvokeAsync("Del_kiji", new object[] {
                        sUser,
                        sData}, this.Del_kijiOperationCompleted, userState);
        }
        
        private void OnDel_kijiOperationCompleted(object arg) {
            if ((this.Del_kijiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Del_kijiCompleted(this, new Del_kijiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/Get_kijiCD", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Get_kijiCD(string[] sUser, string sBcode, string sKname) {
            object[] results = this.Invoke("Get_kijiCD", new object[] {
                        sUser,
                        sBcode,
                        sKname});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGet_kijiCD(string[] sUser, string sBcode, string sKname, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Get_kijiCD", new object[] {
                        sUser,
                        sBcode,
                        sKname}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGet_kijiCD(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_kijiCDAsync(string[] sUser, string sBcode, string sKname) {
            this.Get_kijiCDAsync(sUser, sBcode, sKname, null);
        }
        
        /// <remarks/>
        public void Get_kijiCDAsync(string[] sUser, string sBcode, string sKname, object userState) {
            if ((this.Get_kijiCDOperationCompleted == null)) {
                this.Get_kijiCDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_kijiCDOperationCompleted);
            }
            this.InvokeAsync("Get_kijiCD", new object[] {
                        sUser,
                        sBcode,
                        sKname}, this.Get_kijiCDOperationCompleted, userState);
        }
        
        private void OnGet_kijiCDOperationCompleted(object arg) {
            if ((this.Get_kijiCDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_kijiCDCompleted(this, new Get_kijiCDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/wakeupDB", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string wakeupDB() {
            object[] results = this.Invoke("wakeupDB", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginwakeupDB(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("wakeupDB", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndwakeupDB(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void wakeupDBAsync() {
            this.wakeupDBAsync(null);
        }
        
        /// <remarks/>
        public void wakeupDBAsync(object userState) {
            if ((this.wakeupDBOperationCompleted == null)) {
                this.wakeupDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnwakeupDBOperationCompleted);
            }
            this.InvokeAsync("wakeupDB", new object[0], this.wakeupDBOperationCompleted, userState);
        }
        
        private void OnwakeupDBOperationCompleted(object arg) {
            if ((this.wakeupDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.wakeupDBCompleted(this, new wakeupDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Walkthrough/XmlWebServices/wakeupDB2", RequestNamespace="http://Walkthrough/XmlWebServices/", ResponseNamespace="http://Walkthrough/XmlWebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string wakeupDB2(int iConCnt) {
            object[] results = this.Invoke("wakeupDB2", new object[] {
                        iConCnt});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginwakeupDB2(int iConCnt, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("wakeupDB2", new object[] {
                        iConCnt}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndwakeupDB2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void wakeupDB2Async(int iConCnt) {
            this.wakeupDB2Async(iConCnt, null);
        }
        
        /// <remarks/>
        public void wakeupDB2Async(int iConCnt, object userState) {
            if ((this.wakeupDB2OperationCompleted == null)) {
                this.wakeupDB2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnwakeupDB2OperationCompleted);
            }
            this.InvokeAsync("wakeupDB2", new object[] {
                        iConCnt}, this.wakeupDB2OperationCompleted, userState);
        }
        
        private void OnwakeupDB2OperationCompleted(object arg) {
            if ((this.wakeupDB2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.wakeupDB2Completed(this, new wakeupDB2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Get_kijiCompletedEventHandler(object sender, Get_kijiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_kijiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_kijiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Get_SkijiCompletedEventHandler(object sender, Get_SkijiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_SkijiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_SkijiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Upd_kijiCompletedEventHandler(object sender, Upd_kijiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Upd_kijiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Upd_kijiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Ins_kijiCompletedEventHandler(object sender, Ins_kijiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Ins_kijiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Ins_kijiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Del_kijiCompletedEventHandler(object sender, Del_kijiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Del_kijiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Del_kijiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void Get_kijiCDCompletedEventHandler(object sender, Get_kijiCDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_kijiCDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_kijiCDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void wakeupDBCompletedEventHandler(object sender, wakeupDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class wakeupDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal wakeupDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void wakeupDB2CompletedEventHandler(object sender, wakeupDB2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class wakeupDB2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal wakeupDB2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591